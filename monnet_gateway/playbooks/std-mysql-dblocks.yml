# @meta
# id: "std-mysql-dblocks"
# name: "std-mysql-dblocks"
# description: "Ensure MySQL is running and check database locks"
# os: ["linux", "posix"]
# vars:
#   - name: db_service
#     type: str
#     default: "mysql"
#     description: "Nombre del servicio de MySQL"
#   - name: db_name
#     type: str
#     description: "Nombre de la base de datos"
#     required: true
#   - name: db_username
#     type: str
#     default: "root"
#     description: "Nombre de usuario de la base de datos"
#   - name: db_password
#     type: str_password
#     description: "Contrase√±a de la base de datos"
#     required: true
#   - name: db_port
#     type: int
#     default: 3306
#     description: "Puerto de la base de datos"
# tags: ["mysql", "std"]
---
- name: Ensure MySQL is running and check database locks
  hosts: all
  become: true
  gather_facts: false

  vars:
    db_service: "{{ database_service | default('mysql') }}"
    db_name: "{{ database_name }}"
    mysql_user: "{{ db_username | default('root') }}"
    mysql_password: "{{ db_password }}"
    db_port: "{{ db_port | default(3306) }}"

  tasks:
    - name: Check if MySQL service is running
      ansible.builtin.service_facts:

    - name: Start MySQL service if stopped
      ansible.builtin.service:
        name: "{{ db_service }}"
        state: started
      when: ansible_facts.services[db_service].state != "running"

    - name: Check for locking issues in the database
      ansible.builtin.shell: |
        mysql -u {{ mysql_user }} -p{{ db_password }} -P {{ db_port }} -e "SHOW ENGINE INNODB STATUS \G" | grep -i "waiting for" || true
      register: locking_status
      changed_when: false

    - name: Attempt to repair database if locking issues detected
      ansible.builtin.shell: |
        mysqlcheck -u {{ mysql_user }} -p{{ db_password }} -P {{ db_port }} --repair {{ db_name }}
      when: locking_status.stdout != ""
      register: repair_result

    - name: Debug repair result
      ansible.builtin.debug:
        var: repair_result.stdout
